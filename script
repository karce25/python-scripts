
#!/bin/bash

# Function to display usage of the script
usage() {
    echo "Usage: $0 -i <virtual_servers_csv> -s <snat_pool_name> -r <irule_name> -o <output_file_prefix>"
    echo "  -i  Input CSV file containing the virtual server names"
    echo "  -s  SNAT pool name to apply"
    echo "  -r  iRule name to append"
    echo "  -o  Prefix for output files (e.g. 'output' creates 'output_config.txt' and 'output_rollback.txt')"
    exit 1
}

# Parse command-line arguments
while getopts "i:s:r:o:" opt; do
    case $opt in
        i) CSV_FILE="$OPTARG" ;;
        s) SNAT_POOL="$OPTARG" ;;
        r) IRULE="$OPTARG" ;;
        o) OUTPUT_FILE_PREFIX="$OPTARG" ;;
        *) usage ;;
    esac
done

# Check if all required arguments are provided
if [[ -z "$CSV_FILE" || -z "$SNAT_POOL" || -z "$IRULE" || -z "$OUTPUT_FILE_PREFIX" ]]; then
    usage
fi

# Verify that the CSV file exists
if [[ ! -f "$CSV_FILE" ]]; then
    echo "ERROR: CSV file '$CSV_FILE' not found."
    exit 1
fi

# Define output file names based on the prefix
CONFIG_FILE="${OUTPUT_FILE_PREFIX}_config.txt"
ROLLBACK_FILE="${OUTPUT_FILE_PREFIX}_rollback.txt"

# Initialize output files
echo "# Generated TMSH Commands for BIG-IP Configuration" > "$CONFIG_FILE"
echo "# Rollback Commands for BIG-IP Configuration" > "$ROLLBACK_FILE"

# Read the CSV file line by line
while IFS=',' read -r virtual_server_name || [[ -n "$virtual_server_name" ]]; do
    # Skip the header line if present
    if [[ "$virtual_server_name" == "virtual_server_name" ]]; then
        continue
    fi

    if ! tmsh list ltm virtual "$virtual_server_name" &>/dev/null; then
        echo "WARNING: Virtual Server '$virtual_server_name' not found on the F5 device. Skipping..."
        continue
    fi

    EXISTING_RULES=$(tmsh list ltm virtual "$virtual_server_name" rules 2>/dev/null | awk '/rules {/,/}/ {if ($0 !~ /rules {|}/) print}' | tr '\n' ' ')

    # Generate configuration commands
    echo "# Virtual Server: $virtual_server_name" >> "$CONFIG_FILE"
    echo "tmsh modify ltm virtual $virtual_server_name source-address-translation { pool $SNAT_POOL type snat }" >> "$CONFIG_FILE"

    if [[ -z "$EXISTING_RULES" ]]; then
        # If no existing rules, add the new iRule directly
        echo "# Virtual server without irules configuring irule directly" >> "$CONFIG_FILE"
        echo "tmsh modify ltm virtual $virtual_server_name rules { $IRULE }" >> "$CONFIG_FILE"
    else
        
        APPEND_RULES_COMMAND="RULES=\$(tmsh list ltm virtual $virtual_server_name rules | awk '/rules {/,/}/ {if (!/rules {|}/) print}' | tr '\\n' ' '); "
        APPEND_RULES_COMMAND+="tmsh modify ltm virtual $virtual_server_name rules { $IRULE \$RULES  }"
        echo "# Bash command to append the new iRule without replacing existing ones" >> "$CONFIG_FILE"
        echo "$APPEND_RULES_COMMAND" >> "$CONFIG_FILE"
    fi

    # Generate rollback commands
    if [[ -z "$EXISTING_RULES" ]]; then
        # No original rules, remove the rule entirely during rollback
        ROLLBACK_RULES_COMMAND="RULES=\$(tmsh list ltm virtual $virtual_server_name rules | awk '/rules {/,/}/ {if (!/rules {|}/)  print}' | tr '\\n' ' ' | sed 's/$IRULE//g');"
        ROLLBACK_RULES_COMMAND+="tmsh modify ltm virtual $virtual_server_name rules { }"
        echo "# Rollback for Virtual Server: $virtual_server_name" >> "$ROLLBACK_FILE"
        echo "# Virtual server without irules" >> "$ROLLBACK_FILE"
        echo "$ROLLBACK_RULES_COMMAND" >> "$ROLLBACK_FILE"
    else
        # Restore the original iRules without the newly appended one
        ROLLBACK_RULES_COMMAND="RULES=\$(tmsh list ltm virtual $virtual_server_name rules | awk '/rules {/,/}/ {if (!/rules {|}/)  print}' | tr '\\n' ' ' | sed 's/$IRULE//g'); "
        ROLLBACK_RULES_COMMAND+="tmsh modify ltm virtual $virtual_server_name rules { \$RULES }"
        echo "# Rollback for Virtual Server: $virtual_server_name" >> "$ROLLBACK_FILE"
        echo "$ROLLBACK_RULES_COMMAND" >> "$ROLLBACK_FILE"
    fi

    
    echo "tmsh modify ltm virtual $virtual_server_name source-address-translation { type none }" >> "$ROLLBACK_FILE"
done < "$CSV_FILE"

echo "TMSH commands have been saved to $CONFIG_FILE"
echo "Rollback commands have been saved to $ROLLBACK_FILE"
